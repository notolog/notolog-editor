# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ "3.9", "3.10", "3.11", "3.x" ]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies (General)
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-cov

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # fixes: libEGL.so.1: cannot open shared object file: No such file or directory
        sudo apt update && sudo apt install -y libegl1-mesa-dev
      shell: bash

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
      shell: powershell

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --per-file-ignores="__init__.py:F401" --statistics

    - name: Print working directory
      run: pwd || echo %CD%

    - name: List directory contents (Cross-platform)
      run: |
        Get-ChildItem -Force | Format-Table
      shell: pwsh

    - name: List directory contents (Python)
      run: |
        python -c "import os; print('\n'.join(os.listdir('.')))"

    - name: Test with pytest and coverage report
      run: |
        pytest tests/ --ignore=tests/ui_tests/ --cov=notolog --cov-report=term
        # pytest tests/ --cov=notolog  --cov-report=term-missing --cov-report=html

    # - name: Run coverage
    #  # available after pytest --cov
    #  run: |
    #    coverage run -m pytest tests/
    #    coverage report
    #    coverage html
